{
  "active": false,
  "connections": {
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Pausa",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agente IA": {
      "main": [
        [
          {
            "node": "Agrupar Combinaciones",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Agente IA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agrupar Combinaciones": {
      "main": [
        [
          {
            "node": "Set Búsquedas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat GPT1": {
      "ai_languageModel": [
        [
          {
            "node": "Agente IA",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Set Búsquedas": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pausa": {
      "main": [
        [
          {
            "node": "Set Búsquedas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-03T11:22:50.287Z",
  "id": "SWk7IZE6Q2pJlumH",
  "isArchived": false,
  "meta": null,
  "name": "Agente Scrapper",
  "nodes": [
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "S0VISLKgxyAGzOLu",
          "mode": "list",
          "cachedResultName": "My workflow 4"
        },
        "mode": "each",
        "options": {}
      },
      "id": "432f5fca-42da-403d-8a19-ef009c74e1a9",
      "name": "Execute Workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.1,
      "position": [
        720,
        48
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "",
        "height": 200,
        "width": 220
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -414,
        80
      ],
      "typeVersion": 1,
      "id": "311f69fd-ce6c-4ae6-a5e4-71cb5b7324c8",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "options": {
          "systemMessage": "=Rol\nEres un agente especializado en la generación de combinaciones de búsqueda optimizadas para Google Maps. Tu función principal es interpretar consultas y generar múltiples variaciones inteligentes que combinen diferentes terminologías, sinónimos y ubicaciones geográficas para maximizar la cobertura y diversidad de resultados.\nContexto\nEl usuario necesita obtener combinaciones de términos de búsqueda (sin la URL completa) que posteriormente utilizará para construir URLs de Google Maps con el formato https://www.google.com/maps/search/[combinación]. El objetivo es realizar scraping exhaustivo explorando todas las variaciones posibles de un negocio o servicio en múltiples ubicaciones.\nTarea\nCuando recibas una consulta de búsqueda, debes:\n\nIdentificar el término principal y extraer sinónimos/variaciones\nAnalizar el ámbito geográfico y expandir ubicaciones relevantes\nCombinar inteligentemente terminologías con ubicaciones\nGenerar aproximadamente 50 combinaciones únicas y diversas\nOptimizar para diferentes formas de buscar el mismo servicio\n\nEspecificaciones\nFormato de salida:\n\nPresentar solo las combinaciones (sin URL completa)\nUsar el formato: término+ubicación\nEspacios reemplazados por \"+\"\nLista numerada de ~50 combinaciones\n\nEstrategias de variación:\nVariaciones terminológicas:\n\nSinónimos profesionales\nTérminos coloquiales\nPlurales y singulares\nEspecializaciones del sector\nTérminos técnicos y comerciales\n\nVariaciones geográficas:\n\nCiudades principales y secundarias\nBarrios y distritos específicos\nComunidades autónomas/regiones\nÁreas metropolitanas\nZonas comerciales conocidas\n\nCombinaciones inteligentes:\n\nCruzar todas las variaciones terminológicas con ubicaciones\nIncluir modificadores de calidad (\"mejor\", \"barato\", \"cerca\")\nAñadir contextos específicos (\"24 horas\", \"urgencias\", \"centro\")\n\nEjemplos\nEntrada: \"dentistas España\"\nSalida:\n\ndentistas+madrid\ndentista+barcelona\nclínica+dental+valencia\nodontólogo+sevilla\nclínicas+dentales+bilbao\ndentistas+centro+madrid\nodontólogos+barcelona\nconsultorio+dental+málaga\ndentista+urgencias+madrid\nclínica+dental+zaragoza\nortodoncista+valencia\nimplantes+dentales+sevilla\ndentistas+24+horas+madrid\nodontología+barcelona\ndentistas+baratos+valencia\nclínica+dental+centro+madrid\ndentistas+salamanca+madrid\nodontólogo+eixample+barcelona\ndentistas+urgencias+sevilla\nclínicas+dentales+málaga\ndentista+niños+madrid\nortodoncista+barcelona\nimplantólogo+valencia\ndentistas+las+palmas\nodontología+infantil+madrid\nclínica+dental+córdoba\ndentistas+santander\nendodoncista+madrid\ndentistas+oviedo\nclínica+dental+granada\ndentistas+vigo\nperiodoncia+madrid\ndentistas+alicante\nortodoncista+sevilla\ndentistas+pamplona\nclínica+dental+murcia\ndentistas+logroño\nimplantes+barcelona\ndentistas+toledo\nodontopediatría+madrid\ndentistas+cáceres\ncirujano+oral+valencia\ndentistas+badajoz\nprótesis+dentales+madrid\ndentistas+albacete\nblanqueamiento+dental+barcelona\ndentistas+cuenca\nmaxilofacial+madrid\ndentistas+guadalajara\nestética+dental+valencia\n\nEntrada: \"restaurantes italianos Madrid\"\nSalida:\n\nrestaurantes+italianos+madrid\npizzería+madrid\ntrattoria+madrid\npasta+madrid\ncomida+italiana+madrid\nristorante+madrid\npizzerías+centro+madrid\nrestaurante+italiano+salamanca\npizza+napoletana+madrid\nosteria+madrid\n[...continúa hasta 50]\n\nNotas\n\nCreatividad terminológica: Incluye términos técnicos, coloquiales y especializaciones del sector\nCobertura geográfica exhaustiva: No te limites a ciudades principales, incluye ciudades medianas y barrios específicos\nVariaciones semánticas: Juega con plurales, singulares, diminutivos y aumentativos\nContexto comercial: Añade modificadores que la gente realmente busca (\"cerca de mí\", \"barato\", \"mejor\", \"urgente\")\nEspecialización: Para servicios profesionales, incluye especializaciones y subespecialidades\nActualidad: Considera términos modernos y tendencias actuales del sector\nDiversidad: Evita repeticiones exactas, cada combinación debe aportar valor único\nVolumen objetivo: Siempre generar aproximadamente 50 combinaciones por consulta\nOptimización local: Incluye barrios y distritos conocidos de las ciudades principales"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -128,
        120
      ],
      "id": "430a9af8-f24e-499d-8710-6ffa26ab61b1",
      "name": "Agente IA"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code node (JavaScript)\n\n// 1. Obtén el texto del único item de entrada\nconst output = $input.item.json.output;\n\n// 2. Separa en líneas, filtra vacías y quita el prefijo numérico\nconst lines = output\n  .split(/\\r?\\n/)\n  .map(line => line.trim())\n  .filter(line => line.length > 0);\n\n// 3. Mapea cada línea a un item separado con la clave \"combinación\"\nconst results = lines.map(line => {\n  const query = line.replace(/^\\d+\\.\\s*/, '').trim();\n  return { json: { combinación: query } };\n});\n\n// 4. Devuelve el array de 50 items\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        272,
        120
      ],
      "id": "f76a38f3-5741-4655-96dc-ae3db098c72e",
      "name": "Agrupar Combinaciones"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -352,
        120
      ],
      "id": "3e2606c3-eee7-411e-924e-df4b2ec07d01",
      "name": "When chat message received",
      "webhookId": "d0f11c6c-3805-43ab-ba57-7b6fb3d351d2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -32,
        344
      ],
      "id": "0c05988e-fe9d-4b6f-93ae-9988af04493a",
      "name": "Chat GPT1"
    },
    {
      "parameters": {
        "content": "",
        "height": 200,
        "width": 360,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        252,
        80
      ],
      "typeVersion": 1,
      "id": "7c77dbb8-24e5-4f0c-91cb-4679a89ef02c",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "",
        "height": 200,
        "width": 380,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        690,
        80
      ],
      "typeVersion": 1,
      "id": "9caa9ead-269d-43a5-adef-1272a93589f8",
      "name": "Sticky Note14"
    },
    {
      "parameters": {
        "content": "",
        "width": 150,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -67,
        328
      ],
      "id": "20f161b7-790a-4eb7-ac6f-dd79c8066492",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Code node “Siguiente combinación”\n * Devuelve una combinación distinta en cada ejecución.\n */\n\nconst staticData = $getWorkflowStaticData('global');   // <- aquí estaba el fallo\n\n// 1. Cargar la lista solo la primera vez ────────────────────────────────\nif (!staticData.combos) {\n\tstaticData.combos = $input.all().map(i => i.json.combinación);\n\tstaticData.idx = 0;\n}\n\n// 2. Seleccionar la combinación actual ──────────────────────────────────\nconst idx   = staticData.idx ?? 0;          // null-coalescing por si no existe\nconst combo = staticData.combos[idx];\n\nif (!combo) {\n\tthrow new Error('La lista de combinaciones está vacía o no llegó correctamente.');\n}\n\n// 3. Actualizar el índice para la siguiente ejecución ───────────────────\nstaticData.idx = (idx + 1) % staticData.combos.length;\n\n// 4. Salida: un único ítem\nreturn [{ json: { combinación: combo, índice: idx } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        496,
        120
      ],
      "id": "17a4e003-0fef-47a0-86b0-6acdac26fc0a",
      "name": "Set Búsquedas"
    },
    {
      "parameters": {
        "amount": 1,
        "unit": "minutes"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        944,
        120
      ],
      "id": "615e1259-73db-4869-95af-b4d291aef103",
      "name": "Pausa",
      "webhookId": "89141c62-690e-47a6-ae90-3d59847e5a30"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-08-03T16:37:59.000Z",
  "versionId": "6d670170-861f-4f22-9364-5ba396b727c3"
}